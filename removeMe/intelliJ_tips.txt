Ctrl+Q: To quickly see the documentation for a class or method at caret, press Ctrl+Q (View | Quick Documentation).

Ctrl+B: To navigate to the declaration of a class, method or variable used somewhere in the code, position the caret at the usage and press Ctrl+B (Navigate | Declaration). You can also click the mouse on usages with the Ctrl key pressed to jump to declarations.

Shift+F6: You can easily rename your classes, methods and variables with automatic correction of all places where they are used.
To try it, place the caret at the symbol you want to rename, and press Shift+F6 (Refactor | Rename). Type the new name in the popup window that appears, or select one of the suggested names, and press Enter.

Ctrl+Shift+Space: The SmartType code completion greatly helps to find methods and variables that are suitable in the current context, by analyzing the expected type of the whole expression. So doing, IntelliJ IDEA pinpoints the top five most suitable results and highlights them on the blue background. For example, type and press Ctrl+Shift+Space:

Alt+Insert: Using Alt+Insert (Code | Generate) in the editor, you can easily generate getter and setter methods for any fields of your class.

Shift+Escape: The Escape key in any tool window moves the focus to the editor.
Shift+Escape moves the focus to the editor and also hides the current (or last active) tool window.
The F12 key moves the focus from the editor to the last focused tool window.

Ctrl+Alt+T: When you want to catch exceptions thrown by some code fragment, select it in the editor, press Ctrl+Alt+T (Code | Surround With) and choose try / catch. The catch blocks for all the exceptions thrown inside the block will be generated automatically.
You can customize the bodies of the generated catch blocks on the Code tab of File | Settings | File and Code Templates.
Use other items in the list to surround with other constructs.

Ctrl+Alt+B: To navigate to the implementation(s) of an abstract method, position the caret at its usage or its name in the declaration and press Ctrl+Alt+B.

Ctrl+W: Ctrl+W (extend selection) in the editor selects the word at the caret and then selects expanding areas of the source code. For example, it may select a method name, then the expression that calls this method, then the whole statement, then the containing block, etc. You can also select the word at the caret and the expanding areas of the source code by double-clicking the target areas in the editor.

Alt+Shift+V: The Extract Variable refactoring helps you simplify complicated statements in your code. For example, in the code fragment below, you can select an expression in the code:
and press Alt+Shift+V (Refactor | Extract | Variable...). This will result in the following:

Ctrl+D: Ctrl+D in the editor duplicates the selected block or the current line when no block is selected.

snippets: Try Live Templates
Live Templates allow you to generate many typical code constructs in seconds! For example, type
in a method and press the Tab key to see what happens.
Use the Tab key to move between the template fields. See File | Settings | Live Templates for more details.

Ctrl+P: If the cursor is between the parentheses of a method call, pressing Ctrl+P brings up a list of valid parameters.

Ctrl+Shift+Backspace: Ctrl+Shift+Backspace (Navigate | Last Edit Location) brings you back to the last place where you made changes in the code.
Pressing Ctrl+Shift+Backspace a few times moves you deeper into your changes history.

Ctrl+E: Ctrl+E (View | Recent Files) brings a popup list of the recently visited files. Choose the desired file and press Enter to open it.

Alt+Up: Use Alt+Up and Alt+Down keys to quickly move between methods in the editor.

Ctrl+Shift+J: Ctrl+Shift+J shortcut joins two lines into one and removes unnecessary space to match your code style.

Alt+Shift+8: To easily evaluate the value of any expression while debugging the program, select its text in the editor (you may press a Ctrl+W a few times to efficiently perform this operation) and press Alt+Shift+8.
To quickly evaluate the value of any expression while debugging the program, hold Alt and click this expression to see its value and calculate it, call a method, etc.

Ctrl+Alt+Shift+N: To open any particular method or field in the editor quickly, press Ctrl+Alt+Shift+N (Navigate | Symbol) and start typing its name.
Choose symbol from the drop-down list that appears.

Alt+Shift+C: Use Alt+Shift+C to quickly review your recent changes to the project.

Ctrl+Shift+Enter: Use Ctrl+Shift+Enter to complete a current statement such as if, do-while, try-catch, return (or a method call) into a syntactically correct construct (e.g. add curly braces).

Ctrl+Shift+I: Use Ctrl+Shift+I (View | Quick Definition), to quickly review definition or content of the symbol at caret, without the need to open it in a new editor tab.

Ctrl+Shift+Up or Ctrl+Shift+Down: The Code | Move Statement Up/Down action is useful for reorganizing the code lines in your file, e.g., for bringing a variable declaration closer to variable usage.
Select a code fragment and press Ctrl+Shift+Up or Ctrl+Shift+Down.
The following pictures show an initial location of a code fragment, and the results of moving the selected fragment up and down.

pom.xml: You can quickly open a Maven project by selecting a pom.xml file in the File | Open dialog. The corresponding Maven project is imported with default settings, without launching the wizard.

Ctrl+Shift+7: To view all exit points of a method, place the caret at one of them, e.g. the return statement, and press Ctrl+Shift+7:

Ctrl+Shift+7(for exceptions):You can view all statements within the method where certain exceptions can be caught. Just place the caret at the throws keyword in a method declaration, press Ctrl+Shift+7 and select the desired exception class from the list. This will also work for try and catch.

Alt+Enter: IntelliJ IDEA helps create test cases directly from class declaration. With the caret at the class name in the editor, press Alt+Enter, and choose Create Test from the suggestion list:

Ctrl+C(for whole lines):If nothing is selected in the editor, and you press Ctrl+C, then the whole line at caret is copied to the clipboard.

Alt+click(for closing tabs): There are two ways of closing all tabs in the editor, except the current one:
First, right-click the editor tab, and choose Close Others on the context menu.
Second, keeping the Alt key pressed, click 'x' (that's on the tab..) on the editor tab.

Ctrl+D(for directories comparison): To compare two directories, select one or both of them in the Project view and press Ctrl+D.

Ctrl+K: The keyboard shortcut Ctrl+K enables you to quickly invoke the Commit Changes dialog.
This dialog shows all modifications in project, gives summary information of file status and suggests improvements before check-in.

Ctrl+F -> Ctrl+R: It is very easy to toggle between find and replace functionality.
When you perform search and replace in a file, pressing Ctrl+F shows the search pane. Pressing Ctrl+R adds field, where you can type the replace string.
While in the Find in Path dialog, you can switch to replace by pressing Ctrl+Shift+R. Same way, press Ctrl+Shift+F to hide the Replace with field, and switch to mere search.

Terminal: You don't need to leave IntelliJ IDEA to work with your favorite shell. Just click the Terminal tool window button, and enjoy using the embedded local terminal.

Shift+"scroll mouse": Enable the horizontal scrolling with the mouse wheel by holding the Shift key.

(Shift key)*2: IntelliJ IDEA allows you to search through the classes, files, tool windows, actions, settings, and symbols of your project by double pressing the Shift key.

Shift+Enter: Press Shift+Enter to add a new line after the one where the caret is currently located and move the caret to the beginning of this new line.

Ctrl+Alt+Enter: To add a line before the current one, press Ctrl+Alt+Enter.

Ctrl+y: Press Ctrl+Y to delete the line at caret.

Ctrl+Shift+"-": collapse all (fold all)

Ctrl+Shift+A -> "convert indents": convert spaces that act like tabs into tabs

Shift+F6: renames all usages of the selected object

Ctrl+Alt+Shift+i -> "unused...": search for "unused" stuff in a customizable scope to safely remove from the specified scope.
                    can also be used to "Inspect" anything else in the code such as System.out.